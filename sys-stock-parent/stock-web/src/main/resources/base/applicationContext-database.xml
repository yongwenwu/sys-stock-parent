<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	     xmlns:aop="http://www.springframework.org/schema/aop"
	     xmlns:tx="http://www.springframework.org/schema/tx"
	     xmlns:util="http://www.springframework.org/schema/util"
	     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd ">

	<!-- 数据库1 -->
	<bean id="elp_product_master_db" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url"      value="${jdbc.elp_product.master.url}"/>
        <property name="username" value="${jdbc.elp_product.master.username}"/>
        <property name="password" value="${jdbc.elp_product.master.password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <property name="filters" value="${druid.filters}" />
    </bean>
	<bean id="elp_product_slave_db" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.elp_product.slave.url}"/>
        <property name="username" value="${jdbc.elp_product.slave.username}"/>
        <property name="password" value="${jdbc.elp_product.slave.password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <property name="filters" value="${druid.filters}" />
    </bean>
    <!-- 数据库2 -->
    <!-- 
	<bean id="db_auth_master_db" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url"      value="${jdbc.db_auth.master.url}"/>
        <property name="username" value="${jdbc.db_auth.master.username}"/>
        <property name="password" value="${jdbc.db_auth.master.password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <property name="filters" value="${druid.filters}" />
    </bean>
	<bean id="db_auth_slave_db" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.db_auth.slave.url}"/>
        <property name="username" value="${jdbc.db_auth.slave.username}"/>
        <property name="password" value="${jdbc.db_auth.slave.password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <property name="filters" value="${druid.filters}" />
    </bean>
	 -->
	<!-- spring ibatis  -->
	<bean id="sqlSessionFactory_dbs" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDs_dbs" />
		<property name="mapperLocations" value="classpath*:com/stock/**/dao/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<!-- spring ibatis  -->
	<bean id="mapperScannerConfigurer_dbs" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_dbs"></property>
		<property name="basePackage" value="com.stock.**.dao" />
	</bean>
	
	<!-- 事务  -->
	<bean id="transactionManager_dbs" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDs_dbs" />
		<property name="globalRollbackOnParticipationFailure" value="false" />
	</bean>
	
	<!-- 动态绑定数据库 -->
	<bean id="dynamicDs_dbs" class="com.stock.core.db.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="elp_product_master_db" value-ref="elp_product_master_db" />
				<entry key="elp_product_slave_db" value-ref="elp_product_slave_db" />
				<!-- 
				<entry key="db_auth_master_db" value-ref="db_auth_master_db" />
				<entry key="db_auth_slave_db" value-ref="db_auth_slave_db" />
				 -->
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="elp_product_master_db" />
	</bean>

	<tx:advice id="txAdvice_dbs" transaction-manager="transactionManager_dbs"> 
		<tx:attributes>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="cancel*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="add*"    propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="del*"    propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="set*"    propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*"   propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="commit*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="pause*"  propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="batch*"  propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<bean id="dynamicDsInterceptor_dbs" class="com.stock.core.db.DynamicDataSourceInterceptor">
		<!-- 对应applicationContext-database-ref.xml的db_mapping -->
		<property name="attributeSource" ref="db_mapping"/>
	</bean>	

	<aop:config>
    	<aop:pointcut id="dynamicDataSourcePoint" expression="execution(public * com.stock.*.service.impl.*.*(..))"/> 
        <aop:advisor pointcut-ref="dynamicDataSourcePoint" advice-ref="dynamicDsInterceptor_dbs"/>
        <aop:advisor pointcut-ref="dynamicDataSourcePoint" advice-ref="txAdvice_dbs"/>
    </aop:config>	
    
</beans>